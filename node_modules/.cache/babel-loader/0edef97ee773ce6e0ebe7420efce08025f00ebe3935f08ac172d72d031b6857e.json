{"ast":null,"code":"import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../firebase/config';\nclass PowerPointImportService {\n  constructor() {\n    this.supportedFormats = ['.pptx', '.ppt'];\n  }\n\n  // Convert PowerPoint to images using a cloud service approach\n  async convertToImages(file) {\n    try {\n      console.log('[PowerPointImportService] Starting image conversion for:', file.name);\n\n      // Upload the PowerPoint file to Firebase Storage\n      const storageRef = ref(storage, `powerpoint-imports/${Date.now()}-${file.name}`);\n      const uploadResult = await uploadBytes(storageRef, file);\n      const fileUrl = await getDownloadURL(uploadResult.ref);\n      console.log('[PowerPointImportService] File uploaded to:', fileUrl);\n\n      // For now, we'll use a placeholder approach\n      // In a production environment, you'd integrate with a service like:\n      // - Google Slides API\n      // - Microsoft Graph API\n      // - CloudConvert API\n      // - Or a custom server with LibreOffice/Python-pptx\n\n      // Return mock data for demonstration\n      const mockSlides = await this.generateMockSlides(file.name);\n      return {\n        success: true,\n        slides: mockSlides,\n        originalFileUrl: fileUrl,\n        message: 'PowerPoint imported successfully (demo mode)'\n      };\n    } catch (error) {\n      console.error('[PowerPointImportService] Error converting to images:', error);\n      throw new Error('Failed to convert PowerPoint to images: ' + error.message);\n    }\n  }\n\n  // Extract content from PowerPoint (text, images, etc.)\n  async extractContent(file) {\n    try {\n      console.log('[PowerPointImportService] Starting content extraction for:', file.name);\n\n      // This would use a library like PptxGenJS or similar\n      // For now, we'll return mock data\n      const extractedSlides = await this.generateMockContentSlides(file.name);\n      return {\n        success: true,\n        slides: extractedSlides,\n        message: 'Content extracted successfully (demo mode)'\n      };\n    } catch (error) {\n      console.error('[PowerPointImportService] Error extracting content:', error);\n      throw new Error('Failed to extract content: ' + error.message);\n    }\n  }\n\n  // Generate mock slides for demonstration\n  async generateMockSlides(fileName) {\n    const slideCount = Math.floor(Math.random() * 5) + 3; // 3-7 slides\n    const slides = [];\n    for (let i = 0; i < slideCount; i++) {\n      slides.push({\n        id: `slide-${Date.now()}-${i}`,\n        title: `Slide ${i + 1} from ${fileName}`,\n        type: 'image',\n        imageUrl: `https://via.placeholder.com/800x600/4F46E5/FFFFFF?text=Slide+${i + 1}`,\n        order: i,\n        originalSlideNumber: i + 1\n      });\n    }\n    return slides;\n  }\n\n  // Generate mock content slides for demonstration\n  async generateMockContentSlides(fileName) {\n    const slideCount = Math.floor(Math.random() * 5) + 3; // 3-7 slides\n    const slides = [];\n    const mockContent = [{\n      title: 'Introduction',\n      elements: [{\n        type: 'text',\n        content: 'Welcome to our presentation',\n        style: {\n          fontSize: 24,\n          fontWeight: 'bold'\n        }\n      }, {\n        type: 'text',\n        content: 'This is a sample slide',\n        style: {\n          fontSize: 16\n        }\n      }]\n    }, {\n      title: 'Key Points',\n      elements: [{\n        type: 'text',\n        content: 'Key Points',\n        style: {\n          fontSize: 20,\n          fontWeight: 'bold'\n        }\n      }, {\n        type: 'text',\n        content: '• Point 1',\n        style: {\n          fontSize: 16\n        }\n      }, {\n        type: 'text',\n        content: '• Point 2',\n        style: {\n          fontSize: 16\n        }\n      }, {\n        type: 'text',\n        content: '• Point 3',\n        style: {\n          fontSize: 16\n        }\n      }]\n    }, {\n      title: 'Data Analysis',\n      elements: [{\n        type: 'text',\n        content: 'Data Analysis',\n        style: {\n          fontSize: 20,\n          fontWeight: 'bold'\n        }\n      }, {\n        type: 'image',\n        imageUrl: 'https://via.placeholder.com/400x300/10B981/FFFFFF?text=Chart'\n      }, {\n        type: 'text',\n        content: 'Analysis results show...',\n        style: {\n          fontSize: 14\n        }\n      }]\n    }];\n    for (let i = 0; i < slideCount; i++) {\n      const contentIndex = i % mockContent.length;\n      slides.push({\n        id: `slide-${Date.now()}-${i}`,\n        title: mockContent[contentIndex].title,\n        type: 'content',\n        elements: mockContent[contentIndex].elements,\n        order: i,\n        originalSlideNumber: i + 1\n      });\n    }\n    return slides;\n  }\n\n  // Validate file format\n  validateFile(file) {\n    const fileName = file.name.toLowerCase();\n    const isValidFormat = this.supportedFormats.some(format => fileName.endsWith(format));\n    if (!isValidFormat) {\n      throw new Error(`Unsupported file format. Please upload a ${this.supportedFormats.join(' or ')} file.`);\n    }\n    if (file.size > 50 * 1024 * 1024) {\n      // 50MB limit\n      throw new Error('File size too large. Please upload a file smaller than 50MB.');\n    }\n    return true;\n  }\n\n  // Get file info\n  getFileInfo(file) {\n    return {\n      name: file.name,\n      size: this.formatFileSize(file.size),\n      type: file.type,\n      lastModified: new Date(file.lastModified).toLocaleDateString()\n    };\n  }\n\n  // Format file size\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n}\nexport default new PowerPointImportService();","map":{"version":3,"names":["ref","uploadBytes","getDownloadURL","storage","PowerPointImportService","constructor","supportedFormats","convertToImages","file","console","log","name","storageRef","Date","now","uploadResult","fileUrl","mockSlides","generateMockSlides","success","slides","originalFileUrl","message","error","Error","extractContent","extractedSlides","generateMockContentSlides","fileName","slideCount","Math","floor","random","i","push","id","title","type","imageUrl","order","originalSlideNumber","mockContent","elements","content","style","fontSize","fontWeight","contentIndex","length","validateFile","toLowerCase","isValidFormat","some","format","endsWith","join","size","getFileInfo","formatFileSize","lastModified","toLocaleDateString","bytes","k","sizes","parseFloat","pow","toFixed"],"sources":["C:/Users/aanime/commeff3/src/services/PowerPointImportService.js"],"sourcesContent":["import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { storage } from '../firebase/config';\r\n\r\nclass PowerPointImportService {\r\n  constructor() {\r\n    this.supportedFormats = ['.pptx', '.ppt'];\r\n  }\r\n\r\n  // Convert PowerPoint to images using a cloud service approach\r\n  async convertToImages(file) {\r\n    try {\r\n      console.log('[PowerPointImportService] Starting image conversion for:', file.name);\r\n      \r\n      // Upload the PowerPoint file to Firebase Storage\r\n      const storageRef = ref(storage, `powerpoint-imports/${Date.now()}-${file.name}`);\r\n      const uploadResult = await uploadBytes(storageRef, file);\r\n      const fileUrl = await getDownloadURL(uploadResult.ref);\r\n      \r\n      console.log('[PowerPointImportService] File uploaded to:', fileUrl);\r\n      \r\n      // For now, we'll use a placeholder approach\r\n      // In a production environment, you'd integrate with a service like:\r\n      // - Google Slides API\r\n      // - Microsoft Graph API\r\n      // - CloudConvert API\r\n      // - Or a custom server with LibreOffice/Python-pptx\r\n      \r\n      // Return mock data for demonstration\r\n      const mockSlides = await this.generateMockSlides(file.name);\r\n      \r\n      return {\r\n        success: true,\r\n        slides: mockSlides,\r\n        originalFileUrl: fileUrl,\r\n        message: 'PowerPoint imported successfully (demo mode)'\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('[PowerPointImportService] Error converting to images:', error);\r\n      throw new Error('Failed to convert PowerPoint to images: ' + error.message);\r\n    }\r\n  }\r\n\r\n  // Extract content from PowerPoint (text, images, etc.)\r\n  async extractContent(file) {\r\n    try {\r\n      console.log('[PowerPointImportService] Starting content extraction for:', file.name);\r\n      \r\n      // This would use a library like PptxGenJS or similar\r\n      // For now, we'll return mock data\r\n      const extractedSlides = await this.generateMockContentSlides(file.name);\r\n      \r\n      return {\r\n        success: true,\r\n        slides: extractedSlides,\r\n        message: 'Content extracted successfully (demo mode)'\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('[PowerPointImportService] Error extracting content:', error);\r\n      throw new Error('Failed to extract content: ' + error.message);\r\n    }\r\n  }\r\n\r\n  // Generate mock slides for demonstration\r\n  async generateMockSlides(fileName) {\r\n    const slideCount = Math.floor(Math.random() * 5) + 3; // 3-7 slides\r\n    const slides = [];\r\n    \r\n    for (let i = 0; i < slideCount; i++) {\r\n      slides.push({\r\n        id: `slide-${Date.now()}-${i}`,\r\n        title: `Slide ${i + 1} from ${fileName}`,\r\n        type: 'image',\r\n        imageUrl: `https://via.placeholder.com/800x600/4F46E5/FFFFFF?text=Slide+${i + 1}`,\r\n        order: i,\r\n        originalSlideNumber: i + 1\r\n      });\r\n    }\r\n    \r\n    return slides;\r\n  }\r\n\r\n  // Generate mock content slides for demonstration\r\n  async generateMockContentSlides(fileName) {\r\n    const slideCount = Math.floor(Math.random() * 5) + 3; // 3-7 slides\r\n    const slides = [];\r\n    \r\n    const mockContent = [\r\n      {\r\n        title: 'Introduction',\r\n        elements: [\r\n          { type: 'text', content: 'Welcome to our presentation', style: { fontSize: 24, fontWeight: 'bold' } },\r\n          { type: 'text', content: 'This is a sample slide', style: { fontSize: 16 } }\r\n        ]\r\n      },\r\n      {\r\n        title: 'Key Points',\r\n        elements: [\r\n          { type: 'text', content: 'Key Points', style: { fontSize: 20, fontWeight: 'bold' } },\r\n          { type: 'text', content: '• Point 1', style: { fontSize: 16 } },\r\n          { type: 'text', content: '• Point 2', style: { fontSize: 16 } },\r\n          { type: 'text', content: '• Point 3', style: { fontSize: 16 } }\r\n        ]\r\n      },\r\n      {\r\n        title: 'Data Analysis',\r\n        elements: [\r\n          { type: 'text', content: 'Data Analysis', style: { fontSize: 20, fontWeight: 'bold' } },\r\n          { type: 'image', imageUrl: 'https://via.placeholder.com/400x300/10B981/FFFFFF?text=Chart' },\r\n          { type: 'text', content: 'Analysis results show...', style: { fontSize: 14 } }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    for (let i = 0; i < slideCount; i++) {\r\n      const contentIndex = i % mockContent.length;\r\n      slides.push({\r\n        id: `slide-${Date.now()}-${i}`,\r\n        title: mockContent[contentIndex].title,\r\n        type: 'content',\r\n        elements: mockContent[contentIndex].elements,\r\n        order: i,\r\n        originalSlideNumber: i + 1\r\n      });\r\n    }\r\n    \r\n    return slides;\r\n  }\r\n\r\n  // Validate file format\r\n  validateFile(file) {\r\n    const fileName = file.name.toLowerCase();\r\n    const isValidFormat = this.supportedFormats.some(format => fileName.endsWith(format));\r\n    \r\n    if (!isValidFormat) {\r\n      throw new Error(`Unsupported file format. Please upload a ${this.supportedFormats.join(' or ')} file.`);\r\n    }\r\n    \r\n    if (file.size > 50 * 1024 * 1024) { // 50MB limit\r\n      throw new Error('File size too large. Please upload a file smaller than 50MB.');\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Get file info\r\n  getFileInfo(file) {\r\n    return {\r\n      name: file.name,\r\n      size: this.formatFileSize(file.size),\r\n      type: file.type,\r\n      lastModified: new Date(file.lastModified).toLocaleDateString()\r\n    };\r\n  }\r\n\r\n  // Format file size\r\n  formatFileSize(bytes) {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n}\r\n\r\nexport default new PowerPointImportService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}