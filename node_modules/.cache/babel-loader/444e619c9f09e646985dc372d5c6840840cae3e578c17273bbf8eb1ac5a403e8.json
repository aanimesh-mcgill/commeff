{"ast":null,"code":"import { collection, addDoc, getDocs, query, orderBy, serverTimestamp, doc, deleteDoc, updateDoc, getDoc, setDoc } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nimport { getAuth } from 'firebase/auth';\nclass PresentationService {\n  // Get a reference to the presentations subcollection for a course\n  getPresentationsCollection(courseId) {\n    return collection(db, 'courses', courseId, 'presentations');\n  }\n\n  // Create a new presentation\n  async createPresentation(courseId, title, ownerId) {\n    try {\n      console.log('[PresentationService] Creating presentation:', {\n        courseId,\n        title,\n        ownerId\n      });\n      const presentationsCol = this.getPresentationsCollection(courseId);\n      const docRef = await addDoc(presentationsCol, {\n        title,\n        ownerId,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        slideCount: 0,\n        audienceMode: 'enrolledUsers' // Default mode\n      });\n      console.log('[PresentationService] Presentation created with ID:', docRef.id);\n      return docRef;\n    } catch (err) {\n      console.error('[PresentationService] Error creating presentation:', err);\n      throw err;\n    }\n  }\n\n  // Get all presentations for a course\n  async getPresentations(courseId) {\n    try {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      console.log('[PresentationService][DEBUG] getPresentations called. Auth currentUser:', user ? {\n        uid: user.uid,\n        email: user.email\n      } : user);\n      console.log('[PresentationService] Fetching presentations for course:', courseId);\n      const presentationsCol = this.getPresentationsCollection(courseId);\n      const q = query(presentationsCol, orderBy('createdAt', 'asc'));\n      console.log('[PresentationService][DEBUG] About to call getDocs.');\n      const snapshot = await getDocs(q);\n      console.log('[PresentationService][DEBUG] getDocs returned.');\n      const result = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('[PresentationService] Presentations fetched:', result);\n      return result;\n    } catch (err) {\n      console.error('[PresentationService] Error fetching presentations:', err);\n      throw err;\n    }\n  }\n\n  // Delete a presentation\n  async deletePresentation(courseId, presentationId) {\n    try {\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      await deleteDoc(presentationDoc);\n      console.log('[PresentationService] Presentation deleted:', presentationId);\n    } catch (err) {\n      console.error('[PresentationService] Error deleting presentation:', err);\n      throw err;\n    }\n  }\n\n  // Add a slide to a presentation\n  async addSlide(courseId, presentationId, slideData) {\n    try {\n      console.log('[PresentationService] Adding slide to presentation:', {\n        courseId,\n        presentationId,\n        slideData\n      });\n      const slidesCol = collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\n      const docRef = await addDoc(slidesCol, {\n        ...slideData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n\n      // Update presentation slide count\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      await updateDoc(presentationDoc, {\n        updatedAt: serverTimestamp()\n      });\n      console.log('[PresentationService] Slide added with ID:', docRef.id);\n      return docRef;\n    } catch (err) {\n      console.error('[PresentationService] Error adding slide:', err);\n      throw err;\n    }\n  }\n\n  // Set the live presentation for a course\n  async setLivePresentation(courseId, presentationId) {\n    const courseDoc = doc(db, 'courses', courseId);\n    await updateDoc(courseDoc, {\n      livePresentation: presentationId\n    });\n\n    // Also set isLive: true on the selected presentation, false on all others\n    const presentationsCol = collection(db, 'courses', courseId, 'presentations');\n    const allPresentations = await getDocs(presentationsCol);\n    for (const pres of allPresentations.docs) {\n      await updateDoc(doc(db, 'courses', courseId, 'presentations', pres.id), {\n        isLive: pres.id === presentationId\n      });\n    }\n  }\n\n  // Get the live presentation for a course\n  async getLivePresentation(courseId) {\n    const courseDoc = doc(db, 'courses', courseId);\n    const courseSnap = await getDoc(courseDoc);\n    if (courseSnap.exists()) {\n      return courseSnap.data().livePresentation || null;\n    }\n    return null;\n  }\n\n  // Get a single presentation by courseId and presentationId\n  async getPresentation(presentationId, courseId) {\n    try {\n      console.log('[PresentationService] getPresentation called with:', {\n        courseId,\n        presentationId\n      });\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      const snap = await getDoc(presentationDoc);\n      if (snap.exists()) {\n        console.log('[PresentationService] Presentation found:', snap.data());\n        return {\n          id: snap.id,\n          ...snap.data()\n        };\n      } else {\n        console.warn('[PresentationService] Presentation does not exist:', {\n          courseId,\n          presentationId\n        });\n        return null;\n      }\n    } catch (err) {\n      console.error('[PresentationService] Error fetching presentation:', err, {\n        courseId,\n        presentationId\n      });\n      throw err;\n    }\n  }\n\n  // Set the audience mode for a presentation\n  async setAudienceMode(courseId, presentationId, mode) {\n    try {\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      const payload = {\n        audienceMode: mode,\n        updatedAt: serverTimestamp()\n      };\n      console.log('[setAudienceMode] Updating doc:', presentationDoc.path, 'with:', payload);\n      await updateDoc(presentationDoc, payload);\n      console.log('[PresentationService] audienceMode updated:', {\n        courseId,\n        presentationId,\n        mode\n      });\n    } catch (err) {\n      console.error('[PresentationService] Error updating audienceMode:', err, {\n        courseId,\n        presentationId,\n        mode\n      });\n      throw err;\n    }\n  }\n}\nexport default new PresentationService();","map":{"version":3,"names":["collection","addDoc","getDocs","query","orderBy","serverTimestamp","doc","deleteDoc","updateDoc","getDoc","setDoc","db","getAuth","PresentationService","getPresentationsCollection","courseId","createPresentation","title","ownerId","console","log","presentationsCol","docRef","createdAt","updatedAt","slideCount","audienceMode","id","err","error","getPresentations","auth","user","currentUser","uid","email","q","snapshot","result","docs","map","data","deletePresentation","presentationId","presentationDoc","addSlide","slideData","slidesCol","setLivePresentation","courseDoc","livePresentation","allPresentations","pres","isLive","getLivePresentation","courseSnap","exists","getPresentation","snap","warn","setAudienceMode","mode","payload","path"],"sources":["C:/Users/aanime/commeff3/src/services/PresentationService.js"],"sourcesContent":["import { collection, addDoc, getDocs, query, orderBy, serverTimestamp, doc, deleteDoc, updateDoc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nclass PresentationService {\r\n  // Get a reference to the presentations subcollection for a course\r\n  getPresentationsCollection(courseId) {\r\n    return collection(db, 'courses', courseId, 'presentations');\r\n  }\r\n\r\n  // Create a new presentation\r\n  async createPresentation(courseId, title, ownerId) {\r\n    try {\r\n      console.log('[PresentationService] Creating presentation:', { courseId, title, ownerId });\r\n      const presentationsCol = this.getPresentationsCollection(courseId);\r\n      const docRef = await addDoc(presentationsCol, {\r\n        title,\r\n        ownerId,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        slideCount: 0,\r\n        audienceMode: 'enrolledUsers' // Default mode\r\n      });\r\n      console.log('[PresentationService] Presentation created with ID:', docRef.id);\r\n      return docRef;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error creating presentation:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Get all presentations for a course\r\n  async getPresentations(courseId) {\r\n    try {\r\n      const auth = getAuth();\r\n      const user = auth.currentUser;\r\n      console.log('[PresentationService][DEBUG] getPresentations called. Auth currentUser:', user ? { uid: user.uid, email: user.email } : user);\r\n      console.log('[PresentationService] Fetching presentations for course:', courseId);\r\n      const presentationsCol = this.getPresentationsCollection(courseId);\r\n      const q = query(presentationsCol, orderBy('createdAt', 'asc'));\r\n      console.log('[PresentationService][DEBUG] About to call getDocs.');\r\n      const snapshot = await getDocs(q);\r\n      console.log('[PresentationService][DEBUG] getDocs returned.');\r\n      const result = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      console.log('[PresentationService] Presentations fetched:', result);\r\n      return result;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error fetching presentations:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Delete a presentation\r\n  async deletePresentation(courseId, presentationId) {\r\n    try {\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      await deleteDoc(presentationDoc);\r\n      console.log('[PresentationService] Presentation deleted:', presentationId);\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error deleting presentation:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Add a slide to a presentation\r\n  async addSlide(courseId, presentationId, slideData) {\r\n    try {\r\n      console.log('[PresentationService] Adding slide to presentation:', { courseId, presentationId, slideData });\r\n      const slidesCol = collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\r\n      const docRef = await addDoc(slidesCol, {\r\n        ...slideData,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      // Update presentation slide count\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      await updateDoc(presentationDoc, {\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      console.log('[PresentationService] Slide added with ID:', docRef.id);\r\n      return docRef;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error adding slide:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Set the live presentation for a course\r\n  async setLivePresentation(courseId, presentationId) {\r\n    const courseDoc = doc(db, 'courses', courseId);\r\n    await updateDoc(courseDoc, { livePresentation: presentationId });\r\n\r\n    // Also set isLive: true on the selected presentation, false on all others\r\n    const presentationsCol = collection(db, 'courses', courseId, 'presentations');\r\n    const allPresentations = await getDocs(presentationsCol);\r\n    for (const pres of allPresentations.docs) {\r\n      await updateDoc(doc(db, 'courses', courseId, 'presentations', pres.id), {\r\n        isLive: pres.id === presentationId\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get the live presentation for a course\r\n  async getLivePresentation(courseId) {\r\n    const courseDoc = doc(db, 'courses', courseId);\r\n    const courseSnap = await getDoc(courseDoc);\r\n    if (courseSnap.exists()) {\r\n      return courseSnap.data().livePresentation || null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Get a single presentation by courseId and presentationId\r\n  async getPresentation(presentationId, courseId) {\r\n    try {\r\n      console.log('[PresentationService] getPresentation called with:', { courseId, presentationId });\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      const snap = await getDoc(presentationDoc);\r\n      if (snap.exists()) {\r\n        console.log('[PresentationService] Presentation found:', snap.data());\r\n        return { id: snap.id, ...snap.data() };\r\n      } else {\r\n        console.warn('[PresentationService] Presentation does not exist:', { courseId, presentationId });\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error fetching presentation:', err, { courseId, presentationId });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Set the audience mode for a presentation\r\n  async setAudienceMode(courseId, presentationId, mode) {\r\n    try {\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      const payload = { audienceMode: mode, updatedAt: serverTimestamp() };\r\n      console.log('[setAudienceMode] Updating doc:', presentationDoc.path, 'with:', payload);\r\n      await updateDoc(presentationDoc, payload);\r\n      console.log('[PresentationService] audienceMode updated:', { courseId, presentationId, mode });\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error updating audienceMode:', err, { courseId, presentationId, mode });\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new PresentationService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}