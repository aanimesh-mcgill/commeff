{"ast":null,"code":"import { collection, addDoc, getDocs, query, orderBy, serverTimestamp, doc, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nclass PresentationService {\n  // Get a reference to the presentations subcollection for a course\n  getPresentationsCollection(courseId) {\n    return collection(db, 'courses', courseId, 'presentations');\n  }\n\n  // Create a new presentation\n  async createPresentation(courseId, title) {\n    try {\n      console.log('[PresentationService] Creating presentation:', {\n        courseId,\n        title\n      });\n      const presentationsCol = this.getPresentationsCollection(courseId);\n      const docRef = await addDoc(presentationsCol, {\n        title,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        slideCount: 0\n      });\n      console.log('[PresentationService] Presentation created with ID:', docRef.id);\n      return docRef;\n    } catch (err) {\n      console.error('[PresentationService] Error creating presentation:', err);\n      throw err;\n    }\n  }\n\n  // Get all presentations for a course\n  async getPresentations(courseId) {\n    try {\n      console.log('[PresentationService] Fetching presentations for course:', courseId);\n      const presentationsCol = this.getPresentationsCollection(courseId);\n      const q = query(presentationsCol, orderBy('createdAt', 'asc'));\n      const snapshot = await getDocs(q);\n      const result = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('[PresentationService] Presentations fetched:', result);\n      return result;\n    } catch (err) {\n      console.error('[PresentationService] Error fetching presentations:', err);\n      throw err;\n    }\n  }\n\n  // Delete a presentation\n  async deletePresentation(courseId, presentationId) {\n    try {\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      await deleteDoc(presentationDoc);\n      console.log('[PresentationService] Presentation deleted:', presentationId);\n    } catch (err) {\n      console.error('[PresentationService] Error deleting presentation:', err);\n      throw err;\n    }\n  }\n\n  // Add a slide to a presentation\n  async addSlide(courseId, presentationId, slideData) {\n    try {\n      console.log('[PresentationService] Adding slide to presentation:', {\n        courseId,\n        presentationId,\n        slideData\n      });\n      const slidesCol = collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\n      const docRef = await addDoc(slidesCol, {\n        ...slideData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n\n      // Update presentation slide count\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\n      await updateDoc(presentationDoc, {\n        updatedAt: serverTimestamp()\n      });\n      console.log('[PresentationService] Slide added with ID:', docRef.id);\n      return docRef;\n    } catch (err) {\n      console.error('[PresentationService] Error adding slide:', err);\n      throw err;\n    }\n  }\n}\nexport default new PresentationService();","map":{"version":3,"names":["collection","addDoc","getDocs","query","orderBy","serverTimestamp","doc","deleteDoc","updateDoc","db","PresentationService","getPresentationsCollection","courseId","createPresentation","title","console","log","presentationsCol","docRef","createdAt","updatedAt","slideCount","id","err","error","getPresentations","q","snapshot","result","docs","map","data","deletePresentation","presentationId","presentationDoc","addSlide","slideData","slidesCol"],"sources":["C:/Users/aanime/commeff3/src/services/PresentationService.js"],"sourcesContent":["import { collection, addDoc, getDocs, query, orderBy, serverTimestamp, doc, deleteDoc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\nclass PresentationService {\r\n  // Get a reference to the presentations subcollection for a course\r\n  getPresentationsCollection(courseId) {\r\n    return collection(db, 'courses', courseId, 'presentations');\r\n  }\r\n\r\n  // Create a new presentation\r\n  async createPresentation(courseId, title) {\r\n    try {\r\n      console.log('[PresentationService] Creating presentation:', { courseId, title });\r\n      const presentationsCol = this.getPresentationsCollection(courseId);\r\n      const docRef = await addDoc(presentationsCol, {\r\n        title,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        slideCount: 0\r\n      });\r\n      console.log('[PresentationService] Presentation created with ID:', docRef.id);\r\n      return docRef;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error creating presentation:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Get all presentations for a course\r\n  async getPresentations(courseId) {\r\n    try {\r\n      console.log('[PresentationService] Fetching presentations for course:', courseId);\r\n      const presentationsCol = this.getPresentationsCollection(courseId);\r\n      const q = query(presentationsCol, orderBy('createdAt', 'asc'));\r\n      const snapshot = await getDocs(q);\r\n      const result = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      console.log('[PresentationService] Presentations fetched:', result);\r\n      return result;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error fetching presentations:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Delete a presentation\r\n  async deletePresentation(courseId, presentationId) {\r\n    try {\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      await deleteDoc(presentationDoc);\r\n      console.log('[PresentationService] Presentation deleted:', presentationId);\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error deleting presentation:', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Add a slide to a presentation\r\n  async addSlide(courseId, presentationId, slideData) {\r\n    try {\r\n      console.log('[PresentationService] Adding slide to presentation:', { courseId, presentationId, slideData });\r\n      const slidesCol = collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\r\n      const docRef = await addDoc(slidesCol, {\r\n        ...slideData,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      // Update presentation slide count\r\n      const presentationDoc = doc(db, 'courses', courseId, 'presentations', presentationId);\r\n      await updateDoc(presentationDoc, {\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      console.log('[PresentationService] Slide added with ID:', docRef.id);\r\n      return docRef;\r\n    } catch (err) {\r\n      console.error('[PresentationService] Error adding slide:', err);\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new PresentationService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}