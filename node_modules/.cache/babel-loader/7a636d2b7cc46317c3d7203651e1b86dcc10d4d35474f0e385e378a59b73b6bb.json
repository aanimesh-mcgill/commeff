{"ast":null,"code":"import { collection, addDoc, getDocs, updateDoc, doc, deleteDoc, orderBy, query, serverTimestamp, writeBatch } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nclass SlideService {\n  getSlidesCollection(courseId, presentationId) {\n    return collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\n  }\n  async addSlide(courseId, presentationId, slide) {\n    var _slide$order;\n    const slidesCol = this.getSlidesCollection(courseId, presentationId);\n    const docRef = await addDoc(slidesCol, {\n      ...slide,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n      order: (_slide$order = slide.order) !== null && _slide$order !== void 0 ? _slide$order : 0\n    });\n    return docRef;\n  }\n  async getSlides(courseId, presentationId) {\n    const slidesCol = this.getSlidesCollection(courseId, presentationId);\n    const q = query(slidesCol, orderBy('order', 'asc'));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  }\n  async updateSlide(courseId, presentationId, slideId, updates) {\n    const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', slideId);\n    await updateDoc(slideDoc, {\n      ...updates,\n      updatedAt: serverTimestamp()\n    });\n  }\n  async deleteSlide(courseId, presentationId, slideId) {\n    const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', slideId);\n    await deleteDoc(slideDoc);\n  }\n  async updateSlideOrders(courseId, presentationId, slideIdOrderPairs) {\n    const batch = writeBatch(db);\n    slideIdOrderPairs.forEach(({\n      id,\n      order\n    }) => {\n      const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', id);\n      batch.update(slideDoc, {\n        order\n      });\n    });\n    await batch.commit();\n  }\n}\nexport default new SlideService();","map":{"version":3,"names":["collection","addDoc","getDocs","updateDoc","doc","deleteDoc","orderBy","query","serverTimestamp","writeBatch","db","SlideService","getSlidesCollection","courseId","presentationId","addSlide","slide","_slide$order","slidesCol","docRef","createdAt","updatedAt","order","getSlides","q","snapshot","docs","map","id","data","updateSlide","slideId","updates","slideDoc","deleteSlide","updateSlideOrders","slideIdOrderPairs","batch","forEach","update","commit"],"sources":["C:/Users/aanime/commeff3/src/services/SlideService.js"],"sourcesContent":["import { collection, addDoc, getDocs, updateDoc, doc, deleteDoc, orderBy, query, serverTimestamp, writeBatch } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\nclass SlideService {\r\n  getSlidesCollection(courseId, presentationId) {\r\n    return collection(db, 'courses', courseId, 'presentations', presentationId, 'slides');\r\n  }\r\n\r\n  async addSlide(courseId, presentationId, slide) {\r\n    const slidesCol = this.getSlidesCollection(courseId, presentationId);\r\n    const docRef = await addDoc(slidesCol, {\r\n      ...slide,\r\n      createdAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp(),\r\n      order: slide.order ?? 0\r\n    });\r\n    return docRef;\r\n  }\r\n\r\n  async getSlides(courseId, presentationId) {\r\n    const slidesCol = this.getSlidesCollection(courseId, presentationId);\r\n    const q = query(slidesCol, orderBy('order', 'asc'));\r\n    const snapshot = await getDocs(q);\r\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  }\r\n\r\n  async updateSlide(courseId, presentationId, slideId, updates) {\r\n    const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', slideId);\r\n    await updateDoc(slideDoc, { ...updates, updatedAt: serverTimestamp() });\r\n  }\r\n\r\n  async deleteSlide(courseId, presentationId, slideId) {\r\n    const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', slideId);\r\n    await deleteDoc(slideDoc);\r\n  }\r\n\r\n  async updateSlideOrders(courseId, presentationId, slideIdOrderPairs) {\r\n    const batch = writeBatch(db);\r\n    slideIdOrderPairs.forEach(({ id, order }) => {\r\n      const slideDoc = doc(db, 'courses', courseId, 'presentations', presentationId, 'slides', id);\r\n      batch.update(slideDoc, { order });\r\n    });\r\n    await batch.commit();\r\n  }\r\n}\r\n\r\nexport default new SlideService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}