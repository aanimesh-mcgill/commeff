{"ast":null,"code":"import { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nclass PresentationService {\n  // Get a reference to the presentations subcollection for a course\n  getPresentationsCollection(courseId) {\n    return collection(db, 'courses', courseId, 'presentations');\n  }\n\n  // Create a new presentation\n  async createPresentation(courseId, title) {\n    const presentationsCol = this.getPresentationsCollection(courseId);\n    const docRef = await addDoc(presentationsCol, {\n      title,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n      slideCount: 0\n    });\n    return docRef;\n  }\n\n  // Get all presentations for a course\n  async getPresentations(courseId) {\n    const presentationsCol = this.getPresentationsCollection(courseId);\n    const q = query(presentationsCol, orderBy('createdAt', 'asc'));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  }\n}\nexport default new PresentationService();","map":{"version":3,"names":["collection","addDoc","getDocs","query","orderBy","serverTimestamp","db","PresentationService","getPresentationsCollection","courseId","createPresentation","title","presentationsCol","docRef","createdAt","updatedAt","slideCount","getPresentations","q","snapshot","docs","map","doc","id","data"],"sources":["C:/Users/aanime/commeff3/src/services/PresentationService.js"],"sourcesContent":["import { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\nclass PresentationService {\r\n  // Get a reference to the presentations subcollection for a course\r\n  getPresentationsCollection(courseId) {\r\n    return collection(db, 'courses', courseId, 'presentations');\r\n  }\r\n\r\n  // Create a new presentation\r\n  async createPresentation(courseId, title) {\r\n    const presentationsCol = this.getPresentationsCollection(courseId);\r\n    const docRef = await addDoc(presentationsCol, {\r\n      title,\r\n      createdAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp(),\r\n      slideCount: 0\r\n    });\r\n    return docRef;\r\n  }\r\n\r\n  // Get all presentations for a course\r\n  async getPresentations(courseId) {\r\n    const presentationsCol = this.getPresentationsCollection(courseId);\r\n    const q = query(presentationsCol, orderBy('createdAt', 'asc'));\r\n    const snapshot = await getDocs(q);\r\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  }\r\n}\r\n\r\nexport default new PresentationService(); "],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,eAAe,QAAQ,oBAAoB;AACjG,SAASC,EAAE,QAAQ,oBAAoB;AAEvC,MAAMC,mBAAmB,CAAC;EACxB;EACAC,0BAA0BA,CAACC,QAAQ,EAAE;IACnC,OAAOT,UAAU,CAACM,EAAE,EAAE,SAAS,EAAEG,QAAQ,EAAE,eAAe,CAAC;EAC7D;;EAEA;EACA,MAAMC,kBAAkBA,CAACD,QAAQ,EAAEE,KAAK,EAAE;IACxC,MAAMC,gBAAgB,GAAG,IAAI,CAACJ,0BAA0B,CAACC,QAAQ,CAAC;IAClE,MAAMI,MAAM,GAAG,MAAMZ,MAAM,CAACW,gBAAgB,EAAE;MAC5CD,KAAK;MACLG,SAAS,EAAET,eAAe,CAAC,CAAC;MAC5BU,SAAS,EAAEV,eAAe,CAAC,CAAC;MAC5BW,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAOH,MAAM;EACf;;EAEA;EACA,MAAMI,gBAAgBA,CAACR,QAAQ,EAAE;IAC/B,MAAMG,gBAAgB,GAAG,IAAI,CAACJ,0BAA0B,CAACC,QAAQ,CAAC;IAClE,MAAMS,CAAC,GAAGf,KAAK,CAACS,gBAAgB,EAAER,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC9D,MAAMe,QAAQ,GAAG,MAAMjB,OAAO,CAACgB,CAAC,CAAC;IACjC,OAAOC,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;MAAE,GAAGD,GAAG,CAACE,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC;EAClE;AACF;AAEA,eAAe,IAAIjB,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}