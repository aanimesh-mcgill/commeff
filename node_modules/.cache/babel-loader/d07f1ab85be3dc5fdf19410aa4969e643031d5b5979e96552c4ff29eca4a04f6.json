{"ast":null,"code":"import { collection, addDoc, updateDoc, deleteDoc, doc, getDoc, getDocs, query, where, orderBy, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nclass CourseService {\n  constructor() {\n    this.coursesCollection = collection(db, 'courses');\n  }\n\n  // Create a new course\n  async createCourse(courseData, instructorId) {\n    try {\n      const course = {\n        ...courseData,\n        instructorId,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        isActive: true\n      };\n      const docRef = await addDoc(this.coursesCollection, course);\n      return {\n        id: docRef.id,\n        ...course\n      };\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw error;\n    }\n  }\n\n  // Get all courses (public)\n  async getAllCourses() {\n    try {\n      const q = query(this.coursesCollection, where('isActive', '==', true), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const courses = [];\n      querySnapshot.forEach(doc => {\n        courses.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      return courses;\n    } catch (error) {\n      console.error('Error getting all courses:', error);\n      throw error;\n    }\n  }\n\n  // Get courses by instructor\n  async getCoursesByInstructor(instructorId) {\n    try {\n      const q = query(this.coursesCollection, where('instructorId', '==', instructorId), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const courses = [];\n      querySnapshot.forEach(doc => {\n        courses.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      return courses;\n    } catch (error) {\n      console.error('Error getting instructor courses:', error);\n      throw error;\n    }\n  }\n\n  // Get a single course by ID\n  async getCourseById(courseId) {\n    try {\n      const docRef = doc(db, 'courses', courseId);\n      const docSnap = await getDoc(docRef);\n      if (docSnap.exists()) {\n        return {\n          id: docSnap.id,\n          ...docSnap.data()\n        };\n      } else {\n        throw new Error('Course not found');\n      }\n    } catch (error) {\n      console.error('Error getting course:', error);\n      throw error;\n    }\n  }\n\n  // Update a course\n  async updateCourse(courseId, updates) {\n    try {\n      const docRef = doc(db, 'courses', courseId);\n      await updateDoc(docRef, {\n        ...updates,\n        updatedAt: serverTimestamp()\n      });\n      return await this.getCourseById(courseId);\n    } catch (error) {\n      console.error('Error updating course:', error);\n      throw error;\n    }\n  }\n\n  // Delete a course (soft delete)\n  async deleteCourse(courseId) {\n    try {\n      const docRef = doc(db, 'courses', courseId);\n      await updateDoc(docRef, {\n        isActive: false,\n        updatedAt: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error deleting course:', error);\n      throw error;\n    }\n  }\n\n  // Search courses by name or description\n  async searchCourses(searchTerm) {\n    try {\n      const q = query(this.coursesCollection, where('isActive', '==', true), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const courses = [];\n      querySnapshot.forEach(doc => {\n        const courseData = doc.data();\n        const searchLower = searchTerm.toLowerCase();\n        if (courseData.name.toLowerCase().includes(searchLower) || courseData.description.toLowerCase().includes(searchLower)) {\n          courses.push({\n            id: doc.id,\n            ...courseData\n          });\n        }\n      });\n      return courses;\n    } catch (error) {\n      console.error('Error searching courses:', error);\n      throw error;\n    }\n  }\n\n  // Get courses by semester and year\n  async getCoursesBySemester(semester, year) {\n    try {\n      const q = query(this.coursesCollection, where('isActive', '==', true), where('semester', '==', semester), where('year', '==', year), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const courses = [];\n      querySnapshot.forEach(doc => {\n        courses.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      return courses;\n    } catch (error) {\n      console.error('Error getting courses by semester:', error);\n      throw error;\n    }\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["collection","addDoc","updateDoc","deleteDoc","doc","getDoc","getDocs","query","where","orderBy","serverTimestamp","db","CourseService","constructor","coursesCollection","createCourse","courseData","instructorId","course","createdAt","updatedAt","isActive","docRef","id","error","console","getAllCourses","q","querySnapshot","courses","forEach","push","data","getCoursesByInstructor","getCourseById","courseId","docSnap","exists","Error","updateCourse","updates","deleteCourse","searchCourses","searchTerm","searchLower","toLowerCase","name","includes","description","getCoursesBySemester","semester","year"],"sources":["C:/Users/aanime/commeff3/src/services/CourseService.js"],"sourcesContent":["import { \r\n  collection, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  doc, \r\n  getDoc, \r\n  getDocs, \r\n  query, \r\n  where, \r\n  orderBy,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\nclass CourseService {\r\n  constructor() {\r\n    this.coursesCollection = collection(db, 'courses');\r\n  }\r\n\r\n  // Create a new course\r\n  async createCourse(courseData, instructorId) {\r\n    try {\r\n      const course = {\r\n        ...courseData,\r\n        instructorId,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        isActive: true\r\n      };\r\n\r\n      const docRef = await addDoc(this.coursesCollection, course);\r\n      return {\r\n        id: docRef.id,\r\n        ...course\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating course:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all courses (public)\r\n  async getAllCourses() {\r\n    try {\r\n      const q = query(\r\n        this.coursesCollection,\r\n        where('isActive', '==', true),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const courses = [];\r\n      \r\n      querySnapshot.forEach((doc) => {\r\n        courses.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        });\r\n      });\r\n      \r\n      return courses;\r\n    } catch (error) {\r\n      console.error('Error getting all courses:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get courses by instructor\r\n  async getCoursesByInstructor(instructorId) {\r\n    try {\r\n      const q = query(\r\n        this.coursesCollection,\r\n        where('instructorId', '==', instructorId),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const courses = [];\r\n      \r\n      querySnapshot.forEach((doc) => {\r\n        courses.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        });\r\n      });\r\n      \r\n      return courses;\r\n    } catch (error) {\r\n      console.error('Error getting instructor courses:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get a single course by ID\r\n  async getCourseById(courseId) {\r\n    try {\r\n      const docRef = doc(db, 'courses', courseId);\r\n      const docSnap = await getDoc(docRef);\r\n      \r\n      if (docSnap.exists()) {\r\n        return {\r\n          id: docSnap.id,\r\n          ...docSnap.data()\r\n        };\r\n      } else {\r\n        throw new Error('Course not found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting course:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update a course\r\n  async updateCourse(courseId, updates) {\r\n    try {\r\n      const docRef = doc(db, 'courses', courseId);\r\n      await updateDoc(docRef, {\r\n        ...updates,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n      \r\n      return await this.getCourseById(courseId);\r\n    } catch (error) {\r\n      console.error('Error updating course:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete a course (soft delete)\r\n  async deleteCourse(courseId) {\r\n    try {\r\n      const docRef = doc(db, 'courses', courseId);\r\n      await updateDoc(docRef, {\r\n        isActive: false,\r\n        updatedAt: serverTimestamp()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting course:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search courses by name or description\r\n  async searchCourses(searchTerm) {\r\n    try {\r\n      const q = query(\r\n        this.coursesCollection,\r\n        where('isActive', '==', true),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const courses = [];\r\n      \r\n      querySnapshot.forEach((doc) => {\r\n        const courseData = doc.data();\r\n        const searchLower = searchTerm.toLowerCase();\r\n        \r\n        if (\r\n          courseData.name.toLowerCase().includes(searchLower) ||\r\n          courseData.description.toLowerCase().includes(searchLower)\r\n        ) {\r\n          courses.push({\r\n            id: doc.id,\r\n            ...courseData\r\n          });\r\n        }\r\n      });\r\n      \r\n      return courses;\r\n    } catch (error) {\r\n      console.error('Error searching courses:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get courses by semester and year\r\n  async getCoursesBySemester(semester, year) {\r\n    try {\r\n      const q = query(\r\n        this.coursesCollection,\r\n        where('isActive', '==', true),\r\n        where('semester', '==', semester),\r\n        where('year', '==', year),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const courses = [];\r\n      \r\n      querySnapshot.forEach((doc) => {\r\n        courses.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        });\r\n      });\r\n      \r\n      return courses;\r\n    } catch (error) {\r\n      console.error('Error getting courses by semester:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CourseService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}